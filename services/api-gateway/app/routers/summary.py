"""Document summarisation router for the API gateway.

Provides a simple summary of a previously uploaded document. The
summary is generated by concatenating all chunks belonging to the
document and truncating to a fixed length. A real implementation would
use an LLM to produce a coherent overview and possibly a list of key
insights.
"""

from __future__ import annotations

from fastapi import APIRouter, HTTPException

from services.retrieval.app.main import INDEX  # type: ignore

router = APIRouter()


@router.get("/document_summary")
async def document_summary(doc_id: str) -> dict:
    """Return a naive summary of a document.

    Args:
        doc_id: The identifier of the document to summarise.

    Returns:
        A JSON object containing the document ID and a summary string.
    """
    chunks = [c for c in INDEX if c.doc_id == doc_id]
    if not chunks:
        raise HTTPException(status_code=404, detail="Document not found")
    # Concatenate all text and truncate
    full_text = " ".join(c.text for c in chunks)
    summary = full_text[:500]  # limit the length of the summary
    return {"doc_id": doc_id, "summary": summary}